# jmx-exporter/prometheus-jmx-config.yml
---
# Basic configuration, collects common Kafka metrics
# See https://github.com/prometheus/jmx_exporter for more options
lowercaseOutputLabelNames: true
lowercaseOutputName: true
rules:
  # General JVM metrics
  - pattern: "java.lang<type=Memory><>HeapMemoryUsage: (\\w+)"
    name: "java_lang_memory_heap_usage_$1"
    type: GAUGE
  - pattern: "java.lang<type=GarbageCollector, name=(.*)><>Collection(Time|Count)"
    name: "java_lang_gc_$1_collection_$2"
    labels:
      gc: "$1"
    type: COUNTER

  # Kafka Broker Metrics (add more specific rules as needed)
  # Special cases and very specific rules
  - pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      topic: "$4"
      partition: "$5"
  - pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      broker: "$4:$5"
  - pattern : kafka.coordinator.(\w+)<type=(.+), name=(.+)><>Value
    name: kafka_coordinator_$1_$2_$3
    type: GAUGE
  # Kraft current state info metric rule
  - pattern: "kafka.server<type=raft-metrics><>current-state: ([a-z]+)"
    name: kafka_server_raft_metrics_current_state_info
    type: GAUGE
    value: 1
    labels:
      "state": "$1"
  # Kraft specific rules for raft-metrics, raft-channel-metrics, broker-metadata-metrics
  - pattern: kafka.server<type=(.+)><>([a-z-]+)-total
    name: kafka_server_$1_$2_total
    type: COUNTER
  - pattern: kafka.server<type=(.+)><>([a-z-]+)
    name: kafka_server_$1_$2
    type: GAUGE

  # Generic per-second counters with 0-2 key/value pairs
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_total
    type: COUNTER
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_total
    type: COUNTER
    labels:
      "$4": "$5"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
    name: kafka_$1_$2_$3_total
    type: COUNTER

  # Quota specific rules
  - pattern: kafka.server<type=(.+), user=(.+), client-id=(.+)><>([a-z-]+)
    name: kafka_server_quota_$4
    type: GAUGE
    labels:
      resource: "$1"
      user: "$2"
      clientId: "$3"
  - pattern: kafka.server<type=(.+), client-id=(.+)><>([a-z-]+)
    name: kafka_server_quota_$3
    type: GAUGE
    labels:
      resource: "$1"
      clientId: "$2"
  - pattern: kafka.server<type=(.+), user=(.+)><>([a-z-]+)
    name: kafka_server_quota_$3
    type: GAUGE
    labels:
      resource: "$1"
      user: "$2"

  # Generic gauges with 0-2 key/value pairs
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE

  # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
  #
  # Note that these are missing the '_sum' metric!
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_count
    type: COUNTER
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      "$6": "$7"
      quantile: "0.$8"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_count
    type: COUNTER
    labels:
      "$4": "$5"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      quantile: "0.$6"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
    name: kafka_$1_$2_$3_count
    type: COUNTER
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      quantile: "0.$4"

  # Generic gauges for MeanRate Percent
  # Ex) kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>MeanRate
  - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
    name: kafka_$1_$2_$3_percent
    type: GAUGE
  - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
    name: kafka_$1_$2_$3_percent
    type: GAUGE
  - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
    name: kafka_$1_$2_$3_percent
    type: GAUGE
    labels:
      "$4": "$5"

  # Kafka Connect Metrics (example)
  #kafka.connect:type=app-info,client-id="{clientid}"
  #kafka.consumer:type=app-info,client-id="{clientid}"
  #kafka.producer:type=app-info,client-id="{clientid}"
  - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>start-time-ms'
    name: kafka_$1_start_time_seconds
    labels:
      clientId: "$2"
    help: "Kafka $1 JMX metric start time seconds"
    type: GAUGE
    valueFactor: 0.001
  - pattern: 'kafka.(.+)<type=app-info, client-id=(.+)><>(commit-id|version): (.+)'
    name: kafka_$1_$3_info
    value: 1
    labels:
      clientId: "$2"
      $3: "$4"
    help: "Kafka $1 JMX metric info version and commit-id"
    type: GAUGE

  #kafka.producer:type=producer-topic-metrics,client-id="{clientid}",topic="{topic}"", partition="{partition}"
  #kafka.consumer:type=consumer-fetch-manager-metrics,client-id="{clientid}",topic="{topic}"", partition="{partition}"
  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+), partition=(.+)><>(.+-total|compression-rate|.+-avg|.+-replica|.+-lag|.+-lead)
    name: kafka_$2_$6
    labels:
      clientId: "$3"
      topic: "$4"
      partition: "$5"
    help: "Kafka $1 JMX metric type $2"
    type: GAUGE

  #kafka.producer:type=producer-topic-metrics,client-id="{clientid}",topic="{topic}"
  #kafka.consumer:type=consumer-fetch-manager-metrics,client-id="{clientid}",topic="{topic}"", partition="{partition}"
  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), topic=(.+)><>(.+-total|compression-rate|.+-avg)
    name: kafka_$2_$5
    labels:
      clientId: "$3"
      topic: "$4"
    help: "Kafka $1 JMX metric type $2"
    type: GAUGE

  #kafka.connect:type=connect-node-metrics,client-id="{clientid}",node-id="{nodeid}"
  #kafka.consumer:type=consumer-node-metrics,client-id=consumer-1,node-id="{nodeid}"
  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.+), node-id=(.+)><>(.+-total|.+-avg)
    name: kafka_$2_$5
    labels:
      clientId: "$3"
      nodeId: "$4"
    help: "Kafka $1 JMX metric type $2"
    type: UNTYPED

  #kafka.connect:type=kafka-metrics-count,client-id="{clientid}"
  #kafka.consumer:type=consumer-fetch-manager-metrics,client-id="{clientid}"
  #kafka.consumer:type=consumer-coordinator-metrics,client-id="{clientid}"
  #kafka.consumer:type=consumer-metrics,client-id="{clientid}"
  - pattern: kafka.(.+)<type=(.+)-metrics, client-id=(.*)><>(.+-total|.+-avg|.+-bytes|.+-count|.+-ratio|.+-age|.+-flight|.+-threads|.+-connectors|.+-tasks|.+-ago)
    name: kafka_$2_$4
    labels:
      clientId: "$3"
    help: "Kafka $1 JMX metric type $2"
    type: GAUGE

  #kafka.connect:type=connector-task-metrics,connector="{connector}",task="{task}<> status"
  - pattern: 'kafka.connect<type=connector-task-metrics, connector=(.+), task=(.+)><>status: ([a-z-]+)'
    name: kafka_connect_connector_status
    value: 1
    labels:
      connector: "$1"
      task: "$2"
      status: "$3"
    help: "Kafka Connect JMX Connector status"
    type: GAUGE

  #kafka.connect:type=task-error-metrics,connector="{connector}",task="{task}"
  #kafka.connect:type=source-task-metrics,connector="{connector}",task="{task}"
  #kafka.connect:type=sink-task-metrics,connector="{connector}",task="{task}"
  #kafka.connect:type=connector-task-metrics,connector="{connector}",task="{task}"
  - pattern: kafka.connect<type=(.+)-metrics, connector=(.+), task=(.+)><>(.+-total|.+-count|.+-ms|.+-ratio|.+-avg|.+-failures|.+-requests|.+-timestamp|.+-logged|.+-errors|.+-retries|.+-skipped)
    name: kafka_connect_$1_$4
    labels:
      connector: "$2"
      task: "$3"
    help: "Kafka Connect JMX metric type $1"
    type: GAUGE

  #kafka.connect:type=connector-metrics,connector="{connector}"
  #kafka.connect:type=connect-worker-metrics,connector="{connector}"
  - pattern: kafka.connect<type=connect-worker-metrics, connector=(.+)><>([a-z-]+)
    name: kafka_connect_worker_$2
    labels:
      connector: "$1"
    help: "Kafka Connect JMX metric $1"
    type: GAUGE

  #kafka.connect:type=connect-worker-metrics
  - pattern: kafka.connect<type=connect-worker-metrics><>([a-z-]+)
    name: kafka_connect_worker_$1
    help: "Kafka Connect JMX metric worker"
    type: GAUGE

  #kafka.connect:type=connect-worker-rebalance-metrics
  - pattern: kafka.connect<type=connect-worker-rebalance-metrics><>([a-z-]+)
    name: kafka_connect_worker_rebalance_$1
    help: "Kafka Connect JMX metric rebalance information"
    type: GAUGE

  # Kafka Streams Specific Metrics (Examples - verify MBean names for your version)
  # === Based on common patterns found in Confluent Platform ===
  - pattern: kafka.streams<type=stream-processor-node-metrics,.*>process-rate
    name: kafka_streams_processor_node_process_rate
    help: Process rate of a stream processor node
    type: GAUGE
  - pattern: kafka.streams<type=stream-processor-node-metrics,.*>process-total
    name: kafka_streams_processor_node_process_total
    help: Total number of processed records by a stream processor node
    type: GAUGE
  - pattern: kafka.streams<type=stream-thread-metrics,.*>poll-latency-max
    name: kafka_streams_thread_poll_latency_max
    help: Maximum poll latency of a stream thread
    type: GAUGE
  - pattern: kafka.streams<type=stream-thread-metrics,.*>poll-latency-avg
    name: kafka_streams_thread_poll_latency_avg
    help: Average poll latency of a stream thread
    type: GAUGE
  - pattern: kafka.streams<type=stream-thread-metrics,.*>commit-rate
    name: kafka_streams_thread_commit_rate
    help: Commit rate of a stream thread
    type: GAUGE
  - pattern: kafka.streams<type=stream-thread-metrics,.*>process-records-avg
    name: kafka_streams_thread_process_records_avg
    help: Average number of processed records per second by a stream thread
    type: GAUGE
  - pattern: kafka.streams<type=stream-metrics,.*>alive-stream-threads
    name: kafka_streams_alive_stream_threads
    help: Number of alive stream threads in a Kafka stream
    type: GAUGE
  - pattern: kafka.streams<type=stream-metrics,.*>failed-stream-threads
    name: kafka_streams_failed_stream_threads
    help: Number of failed stream threads in a Kafka stream
    type: GAUGE
  - pattern: kafka.streams<type=stream-state-metrics,.*>block-cache-usage
    name: kafka_streams_state_block_cache_usage
    help: Block cache usage of a Kafka stream
    type: GAUGE
  - pattern: kafka.streams<type=stream-state-metrics,.*>size-all-mem-tables
    name: kafka_streams_state_size_all_mem_tables
    help: Total size of all memory tables in a Kafka stream
    type: GAUGE
  - pattern: kafka.streams<type=stream-state-metrics,.*>estimate-table-readers-mem
    name: kafka_streams_state_estimate_table_readers_mem
    help: Estimated memory used by table readers in a Kafka stream
    type: GAUGE
  - pattern: kafka.streams<type=stream-state-metrics,.*>block-cache-capacity
    name: kafka_streams_state_block_cache_capacity
    help: Block cache capacity of a Kafka stream
    type: GAUGE
  - pattern: 'kafka.streams<type=stream-metrics,.*client-id=(.+)><>state: RUNNING'
    name: kafka_streams_state_running
    help: Kafka stream client is in state RUNNING
    type: GAUGE
    value: 1
    labels:
      clientid: "$1"
  - pattern: 'kafka.streams<type=stream-metrics,.*client-id=(.+)><>state: REBALANCING'
    name: kafka_streams_state_rebalancing
    help: Kafka stream client is in state REBALANCING
    type: GAUGE
    value: 1
    labels:
      clientid: "$1"

  # Schema Registry Specific Metrics (Examples - verify MBean names for your version)
  # === Based on common patterns found in Confluent Platform ===

  # Jetty Metrics (often exposed by SR's web server)
  - pattern: "kafka.schema.registry<type=jetty-metrics><>([^:]+)"
    name: "schema_registry_jetty_$1"
    type: GAUGE

  # Jersey/REST Metrics (for REST API performance)
  # Example for average request latency rate (MBean name might differ)
  - pattern: "io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication<type=jersey-metrics, name=(request-latency-avg-rate|request-latency-max|request-latency-p.+)><>Value"
    name: "schema_registry_jersey_$1"
    type: GAUGE

  # Request Rate examples
  - pattern: "io.confluent.kafka.schemaregistry.rest.SchemaRegistryRestApplication<type=jersey-metrics, name=request-rate><>Count"
    name: "schema_registry_jersey_request_total"
    type: COUNTER

  # Master/Slave Role (might be different in newer versions or configs)
  - pattern: "kafka.schema.registry<type=master-slave-role, name=MasterSlaveRole><>Value"
    name: "schema_registry_master_slave_role"
    type: GAUGE
    labels:
      # Value might be 1 for master, 2 for slave, 3 for error etc. Check docs.
      role_numeric: "$1"
